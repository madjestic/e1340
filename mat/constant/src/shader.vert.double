#version 430 core

layout(location = 0) in float alpha;
layout(location = 1) in vec3 color;
layout(location = 2) in vec3 normal;
layout(location = 3) in vec3 uvCoords;
layout(location = 4) in vec3 vPosition;

uniform dmat4 camera;
uniform dmat4 persp;
uniform dmat4 xform;

// Output data ; will be interpolated for each fragment.
out float A;
out vec3  N;
out vec3  Ng;
out vec3  Cd;
out vec3  uv;

float log10(in float x)
{
	float far  = 10.0;
	float result = (1.0 / log(far)) * log(float(x));
	return(result);
}

void main()
{
	mat3 viewRot =
		mat3( camera[0].xyz
			 , camera[1].xyz
			 , camera[2].xyz );
	
	dmat4 cameraRot =
		dmat4 ( camera[0]
			  , camera[1]
			  , camera[2]
			  , dvec4(0,0,0,1));

	mat3 perspRot =
		mat3 ( persp[0].xyz
		 	  , persp[1].xyz
			  , persp[2].xyz );

	mat3 xformRot =
		mat3 ( xform[0].xyz
			  , xform[1].xyz
			  , xform[2].xyz );	
	
	A  = alpha;
	N  = normalize(perspRot * viewRot * xformRot * normal);
	Ng = normalize(normal);
	Cd = color;
	uv = uvCoords;

	dvec4 position = dvec4(dvec3(vPosition),1.0);

	position //= vec4(position);
		= persp
		* cameraRot
		* xform
		* position;

    gl_Position = vec4(position);
	gl_Position.z = -log10(length(gl_Position.xyz));
} 
